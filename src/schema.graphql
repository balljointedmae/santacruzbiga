schema {
	query: Query
	mutation: Mutation
}
# The query type, represents all of the entry points into our object graph
type Query {
	hero(episode: Episode = NEWHOPE): Character
	reviews(episode: Episode!): [Review]!
	search(text: String!): [SearchResult]!
	character(id: ID!): Character
	droid(id: ID!): Droid
	human(id: ID!): Human
	starship(id: ID!): Starship
}
# The mutation type, represents all updates we can make to our data
type Mutation {
	createReview(episode: Episode!, review: ReviewInput!): Review
}
# The episodes in the Star Wars trilogy
# enum UserType {
# 	COMMENTER
# 	AUTHOR
# }
# A character from the Star Wars universe
interface Author {
	# The ID of the character
	id: ID!
	# The name of the character
	name: String!
	email: String!
	articles: [ID]
	# userType: [UserType!]!
}
interface AuthorInput {
	# The ID of the character
	# The name of the character
	name: String!
	email: String!
	# userType: [UserType!]!
}


interface Article {
	# The ID of the character
	id: ID!
	# The name of the character
	title: String!
	authorId: ID!
	body: 
	# userType: [UserType!]!
}
interface ArticleInput {
	# The ID of the character
	# The name of the character
	title: String!
	body: String!
	authorId: ID!
	# userType: [UserType!]!
}
# # A humanoid creature from the Star Wars universe
# type Human implements Character {
# 	# The ID of the human
# 	id: ID!
# 	# What this human calls themselves
# 	name: String!
# 	# Height in the preferred unit, default is meters
# 	height(unit: LengthUnit = METER): Float!
# 	# Mass in kilograms, or null if unknown
# 	mass: Float
# 	# This human's friends, or an empty list if they have none
# 	friends: [Character]
# 	# The friends of the human exposed as a connection with edges
# 	friendsConnection(first: Int, after: ID): FriendsConnection!
# 	# The movies this human appears in
# 	appearsIn: [Episode!]!
# 	# A list of starships this person has piloted, or an empty list if none
# 	starships: [Starship]
# }
# A connection object for a character's friends
# type FriendsConnection {
# 	# The total number of friends
# 	totalCount: Int!
# 	# The edges for each of the character's friends.
# 	edges: [FriendsEdge]
# 	# A list of the friends, as a convenience when edges are not needed.
# 	friends: [Character]
# 	# Information for paginating this connection
# 	pageInfo: PageInfo!
# }
# # An edge object for a character's friends
# type FriendsEdge {
# 	# A cursor used for pagination
# 	cursor: ID!
# 	# The character represented by this friendship edge
# 	node: Character
# }
# Information for paginating this connection
type PageInfo {
	startCursor: ID
	endCursor: ID
	hasNextPage: Boolean!
}
# # Represents a review for a movie
# type Review {
# 	# The number of stars this review gave, 1-5
# 	stars: Int!
# 	# Comment about the movie
# 	commentary: String
# }
# # The input object sent when someone is creating a new review
# input ReviewInput {
# 	# 0-5 stars
# 	stars: Int!
# 	# Comment about the movie, optional
# 	commentary: String
# }
# type Starship {
# 	# The ID of the starship
# 	id: ID!
# 	# The name of the starship
# 	name: String!
# 	# Length of the starship, along the longest axis
# 	length(unit: LengthUnit = METER): Float!
# }
union SearchResult = Author | Article
